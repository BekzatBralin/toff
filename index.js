const { VK, Keyboard } = require("vk-io");
const fs = require("fs");
const path = require("path");
const { GoogleGenerativeAI } = require("@google/generative-ai");
require("dotenv").config();

const vk = new VK({ token: process.env.VK_TOKEN });

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

const DATA_FILE = path.join(__dirname, "botData.json");
const IMAGE_PATH_CHISLA = path.join(__dirname, "img", "chisla.jpg");
const IMAGE_PATH_RZ = path.join(__dirname, "img", "rz.jpg");
const IMAGE_PATH_AN = path.join(__dirname, "img", "an.jpg");

let botData = loadData();
const myId = parseInt(process.env.VK_GROUP_ID) || null;

function loadData() {
  try {
    const data = JSON.parse(fs.readFileSync(DATA_FILE, "utf8"));
    if (!data.admins) data.admins = [609824089, 8669264];
    return data;
  } catch (e) {
    return {
      admins: [609824089, 8669264],
      currentGame: null,
      giveaway: null,
      participants: [],
      currentGames: {},
      quiz: null,
      roulette: null
    };
  }
}

function saveData() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(botData, null, 2), "utf8");
}

function parseAmount(input) {
  input = input.toLowerCase().replace(/\s/g, "");
  let num = parseFloat(input.replace(/[^0-9.,]/g, "").replace(",", ".")) || 0;
  if (input.includes("–∫–∫–∫")) return num * 1_000_000_000;
  if (input.includes("–∫–∫")) return num * 1_000_000;
  if (input.includes("–∫")) return num * 1_000;
  return num;
}

function formatNumber(num) {
  if (typeof num === "string") num = parseAmount(num);
  return num.toLocaleString("en-US");
}

function formatPrize(input) {
  return `$${formatNumber(input)}`;
}

function shuffleWord(word) {
  let letters = word.split("");
  let shuffled;
  do {
    shuffled = letters.sort(() => Math.random() - 0.5).join("");
  } while (shuffled === word);
  return shuffled;
}

async function getRandomWord() {
  try {
    const prompt = "–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω–æ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π –æ—Ç 5 –¥–æ 10 –±—É–∫–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–Ω–∞–≥—Ä–∞–º–º—ã. –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ. –í –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.";
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = await response.text();
    const word = text.trim().toLowerCase();

    if (word.length >= 5 && word.length <= 10 && /^[–∞-—è—ë]+$/.test(word)) {
      return word;
    }
  } catch (error) {
    console.error("Failed to fetch words from Gemini API:", error);
  }
  return "–ø—Ä–æ–≥—Ä–∞–º–º–∞";
}

vk.updates.on("message_new", async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å
  if (ctx.peerType !== 'chat' && ctx.peerType !== 'group') {
    return;
  }

  const text = ctx.text?.trim();
  const lowerText = text?.toLowerCase();
  const senderId = ctx.senderId;
  const peerId = ctx.peerId;

  if (!text) return;

  if (botData.admins.includes(senderId)) {
    if (lowerText.startsWith("!–∞–¥–º–∏–Ω–∫–∞")) {
      const args = text.split(" ");
      if (args.length < 2) return ctx.send("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: !–∞–¥–º–∏–Ω–∫–∞ <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>");
      const targetId = parseInt(args[1]);
      if (isNaN(targetId)) return ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      const is_admin = botData.admins.includes(targetId);
      if (is_admin) {
        botData.admins = botData.admins.filter(id => id !== targetId);
        saveData();
        return ctx.send(`‚úÖ [id${targetId}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
      } else {
        botData.admins.push(targetId);
        saveData();
        return ctx.send(`‚úÖ [id${targetId}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
      }
    }

    if (lowerText === "!—Å–∫—Ä—ã—Ç—å") {
        await ctx.send({
            message: "–ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞.",
            keyboard: Keyboard.builder().inline(false).oneTime()
        });
        return;
    }

    if (lowerText.startsWith("!—á–∏—Å–ª–∞")) {
      if (botData.currentGame) return ctx.send("‚õî –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.");
      const args = text.split(" ");
      if (args.length < 2) return ctx.send("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: !—á–∏—Å–ª–∞ 1–∫–∫");
      const amount = parseAmount(args[1]);
      if (!amount || isNaN(amount)) return ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.");
      const secret = Math.floor(Math.random() * 37);
      const prizeQuarter = amount / 5;
      botData.currentGame = {
        secret,
        amount,
        answers: {},
        chatId: peerId,
        fullPrize: formatPrize(amount),
        prizeQuarter
      };
      saveData();
      const photo = await vk.upload.messagePhoto({ source: { value: fs.createReadStream(IMAGE_PATH_CHISLA) } });
      await ctx.send({
        message: `@all üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36 –∏ –ø–æ–ª—É—á–∏ ${botData.currentGame.fullPrize}!\n\n` +
                 `–£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!‚òùÔ∏è\n\n` +
                 `–ò—Ç–æ–≥–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã‚è∞ –£–¥–∞—á–∏! üçÄ`,
        attachment: photo.toString()
      });
      setTimeout(() => finishGame(ctx), 2 * 60 * 1000);
      return;
    }

    if (lowerText.startsWith("!—Ä–æ–∑—ã–≥—Ä—ã—à")) {
      const args = text.split(" ");
      if (args.length < 3) return ctx.send("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: !—Ä–æ–∑—ã–≥—Ä—ã—à <—Å—É–º–º–∞> <–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π>");
      const total = parseAmount(args[1]);
      const winners = parseInt(args[2]);
      if (isNaN(winners) || winners <= 0) return ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.");
      botData.giveaway = {
        total: formatPrize(total),
        winnersCount: winners,
        each: formatPrize(total / winners)
      };
      botData.participants = [];
      saveData();
      const photo = await vk.upload.messagePhoto({ source: { value: fs.createReadStream(IMAGE_PATH_RZ) } });
      await ctx.send({
        message: `üî• –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞ ${botData.giveaway.total}!üî•\nüí∞ ${winners} —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞ –ø–æ–ª—É—á–∞—Ç –ø–æ ${botData.giveaway.each}!üí∞\n–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏—Ö? ü§ë \n–¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"! ü§©`,
        attachment: photo.toString(),
        keyboard: Keyboard.builder().textButton({ label: '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', payload: { cmd: 'join' }, color: 'positive' })
      });
      await ctx.send(`üî• @all –í–ù–ò–ú–ê–ù–ò–ï! ¬†üî•\nüí• ¬†–°–µ–π—á–∞—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ ${botData.giveaway.total}! ü§Ø`);
      return;
    }

    if (lowerText.startsWith("!–∞–Ω")) {
      const match = text.match(/!–∞–Ω\s+(.+)/);
      if (!match) return ctx.send("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: !–∞–Ω <–ø—Ä–∏–∑>");
      const rawPrize = match[1].trim();
      const word = await getRandomWord();
      const prize = formatPrize(rawPrize);
      const anagram = shuffleWord(word);
      botData.currentGames[peerId] = { word, prize };
      saveData();
      const photo = await vk.upload.messagePhoto({ source: { value: fs.createReadStream(IMAGE_PATH_AN) } });
      return ctx.send({
        message: `@online üî•–ù—É —á—Ç–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–≥–∞–¥–∞—Ç—å —ç—Ç—É –∞–Ω–∞–≥—Ä–∞–º–º—É!ü§î–ê–Ω–∞–≥—Ä–∞–º–º–∞ –Ω–∞ ${prize}!\n\n–°–õ–û–í–û ‚Äî ${anagram}\n–ü–ï–†–í–ê–Ø –ë–£–ö–í–ê ‚Äî ${word[0]}\n\nüòú ¬†–ù—É-–∫–∞, –ø–æ–¥—É–º–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å!`,
        attachment: photo.toString()
      });
    }

    if (lowerText === "!–∏—Ç–æ–≥–∏") {
      if (!botData.giveaway) return ctx.send("‚ùó –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∑–∞–ø—É—â–µ–Ω.");
      if (botData.participants.length < botData.giveaway.winnersCount) {
        return ctx.send(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${botData.participants.length} –∏–∑ ${botData.giveaway.winnersCount}.`);
      }
      await ctx.send({
        message: "üì¢ –ü–æ–¥–≤–æ–∂—É –∏—Ç–æ–≥–∏!",
        keyboard: Keyboard.builder().inline(false).oneTime()
      });
      const shuffled = botData.participants.sort(() => 0.5 - Math.random());
      const winners = shuffled.slice(0, botData.giveaway.winnersCount);
      for (const id of winners) {
        const [user] = await vk.api.users.get({ user_ids: id });
        await ctx.send(`üéâüéâüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâüéâüéâ \n[id${id}|${user.first_name} ${user.last_name}] - –í–´ –í–´–ò–ì–†–ê–õ–ò ${botData.giveaway.each}ü§ëü§ëü§ë`);
      }
      botData.giveaway = null;
      botData.participants = [];
      saveData();
      await ctx.send({ message: "", keyboard: Keyboard.builder().inline(false).oneTime() });
      return;
    }

    if (lowerText === "!—É—á–∞") {
      if (!botData.giveaway) return ctx.send("‚ùó –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.");
      if (botData.participants.length === 0) return ctx.send("‚õî –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
      let list = "‚ú® –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ú®\n\n";
      for (const id of botData.participants) {
        const [user] = await vk.api.users.get({ user_ids: id });
        list += `[id${id}|${user.first_name} ${user.last_name}]\n`;
      }
      return ctx.send(list);
    }

    if (lowerText === "!—Å—Ç–æ–ø") {
      if (botData.currentGame) {
        botData.currentGame = null;
        saveData();
        return ctx.send("‚úÖ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
      }
      if (botData.giveaway) {
        botData.giveaway = null;
        botData.participants = [];
        saveData();
        await ctx.send({ message: "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", keyboard: Keyboard.builder().inline(false).oneTime() });
        return;
      }
      if (botData.roulette) {
        botData.roulette = null;
        saveData();
        return ctx.send("‚úÖ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
      }
      if (botData.quiz) {
        botData.quiz = null;
        saveData();
        return ctx.send("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
      }
      return ctx.send("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");
    }
  }

  const myIdStr = myId?.toString();
  const lowerTextContainsMention = myIdStr && lowerText.includes(`[club${myIdStr}|`) && lowerText.includes("—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å");

  if (botData.giveaway && (lowerText === "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" || (ctx.payload && ctx.payload.cmd === "join") || lowerTextContainsMention)) {
      if (botData.participants.includes(senderId)) return ctx.send(`‚ùó –¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å.`);
      botData.participants.push(senderId);
      saveData();
      const [user] = await vk.api.users.get({ user_ids: senderId });
      try {
        if (ctx.peerId > 2000000000) {
          await vk.api.messages.delete({
            cmids: [ctx.conversationMessageId],
            peer_id: ctx.peerId,
            delete_for_all: true
          });
        }
      } catch (err) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      }
      return ctx.send(`üéâ [id${senderId}|${user.first_name} ${user.last_name}], –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!`);
  }

  if (botData.currentGame && peerId === botData.currentGame.chatId) {
    const number = parseInt(lowerText);
    if (!isNaN(number) && number >= 0 && number <= 36) {
      if (botData.currentGame.answers[senderId] !== undefined) {
        const [user] = await vk.api.users.get({ user_ids: senderId });
        return ctx.send(`‚ùó [id${senderId}|${user.first_name} ${user.last_name}], —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —á–∏—Å–ª–æ!`);
      }
      const taken = Object.entries(botData.currentGame.answers).find(([_, n]) => n === number);
      if (taken) {
        const [takenId] = taken;
        const [user] = await vk.api.users.get({ user_ids: takenId });
        return ctx.send(`‚ö†Ô∏è –ß–∏—Å–ª–æ ${number} —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ [id${takenId}|${user.first_name} ${user.last_name}].`);
      }
      botData.currentGame.answers[senderId] = number;
      saveData();
      const [user] = await vk.api.users.get({ user_ids: senderId });
      return ctx.send(`‚úÖ [id${senderId}|${user.first_name} ${user.last_name}], —Ç–≤–æ–µ —á–∏—Å–ª–æ ${number} –ø—Ä–∏–Ω—è—Ç–æ! –£–¥–∞—á–∏ üçÄ`);
    }
  }

  if (botData.currentGames[peerId] && lowerText === botData.currentGames[peerId].word) {
    const user = await vk.api.users.get({ user_ids: senderId });
    await ctx.send(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, [id${senderId}|${user[0].first_name} ${user[0].last_name}]! üéâ –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –∞–Ω–∞–≥—Ä–∞–º–º! ¬†üß†\n–°–ª–æ–≤–æ —É–≥–∞–¥–∞–ª, –º–æ–ª–æ–¥–µ—Ü! üëç`);
    delete botData.currentGames[peerId];
    saveData();
  }

  if (botData.quiz && lowerText === botData.quiz.answer) {
    const user = await vk.api.users.get({ user_ids: senderId });
    await ctx.send(`üéâüéâüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, [id${senderId}|${user[0].first_name} ${user[0].last_name}]! –¢—ã –ø–µ—Ä–≤—ã–º –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≤—ã–∏–≥—Ä–∞–ª ${botData.quiz.prize}!ü§ë`);
    botData.quiz = null;
    saveData();
  }

  if (botData.roulette) {
    const bet = parseInt(lowerText);
    if (!isNaN(bet) && bet >= 0 && bet <= 36) {
      if (botData.roulette.bets[senderId]) {
        return ctx.send(`‚ùó –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É.`);
      }
      botData.roulette.bets[senderId] = bet;
      saveData();
      const user = await vk.api.users.get({ user_ids: senderId });
      return ctx.send(`‚úÖ [id${senderId}|${user[0].first_name} ${user[0].last_name}], –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ **${bet}** –ø—Ä–∏–Ω—è—Ç–∞.`);
    }
  }
});

async function finishGame(ctx) {
  const game = botData.currentGame;
  if (!game) return;
  botData.currentGame = null;
  saveData();

  const secret = game.secret;
  const answers = game.answers;
  const winners = Object.entries(answers).filter(([_, num]) => num == secret);

  if (winners.length > 0) {
    for (const [id] of winners) {
      const [user] = await vk.api.users.get({ user_ids: id });
      await ctx.send(`üéâ [id${id}|${user.first_name} ${user.last_name}] —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${secret} –∏ –ø–æ–ª—É—á–∞–µ—Ç ${game.fullPrize}!`);
    }
  } else {
    let closest = [];
    let minDiff = 100;
    for (const [id, num] of Object.entries(answers)) {
      const diff = Math.abs(num - secret);
      if (diff < minDiff) {
        minDiff = diff;
        closest = [id];
      } else if (diff === minDiff) {
        closest.push(id);
      }
    }
    if (closest.length > 0) {
      let msg = `–ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª! ü§´\n–ß–∏—Å–ª–æ –±—ã–ª–æ...${secret}\n\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫ —á–∏—Å–ª—É –±—ã–ª–∏:\n`;
      for (const id of closest) {
        const [user] = await vk.api.users.get({ user_ids: id });
        msg += ` - [id${id}|${user.first_name} ${user.last_name}]\n`;
      }
      msg += `–û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç ${formatPrize(game.prizeQuarter)}`;
      await ctx.send(msg);
    } else {
      await ctx.send(`üòï –ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç ${secret}.`);
    }
  }
}

async function finishRoulette(ctx) {
  const game = botData.roulette;
  if (!game) return;
  botData.roulette = null;
  saveData();

  const winningNumber = Math.floor(Math.random() * 37);
  const winners = Object.entries(game.bets).filter(([_, num]) => num == winningNumber);

  await ctx.send(`üì¢ –†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å! –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: **${winningNumber}**!`);

  if (winners.length > 0) {
    for (const [id] of winners) {
      const [user] = await vk.api.users.get({ user_ids: id });
      await ctx.send(`üéâ [id${id}|${user.first_name} ${user.last_name}] –ø–æ–±–µ–¥–∏–ª –≤ —Ä—É–ª–µ—Ç–∫–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç ${game.prize}!`);
    }
  } else {
    await ctx.send("üòï –ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ.");
  }
}

vk.updates.start().then(() => {
    if (myId) {
        console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ID –≥—Ä—É–ø–ø—ã: ${myId}`);
    } else {
        console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Ç–∞–º –µ—Å—Ç—å.`);
    }
}).catch(console.error);